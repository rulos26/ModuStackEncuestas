<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Encuesta;
use App\Models\Pregunta;
use App\Models\Respuesta;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Cache;

class TestCargaMasiva extends Command
{
    protected $signature = 'test:carga-masiva {encuesta_id?} {--create-files}';
    protected $description = 'Probar el m√≥dulo de carga masiva de encuestas';

    public function handle()
    {
        $encuestaId = $this->argument('encuesta_id');
        $createFiles = $this->option('create-files');

        if (!$encuestaId) {
            $encuesta = Encuesta::first();
            if (!$encuesta) {
                $this->error('No hay encuestas disponibles para probar');
                return 1;
            }
            $encuestaId = $encuesta->id;
        }

        $encuesta = Encuesta::find($encuestaId);
        if (!$encuesta) {
            $this->error("Encuesta con ID {$encuestaId} no encontrada");
            return 1;
        }

        $this->info("=== PRUEBA DE CARGA MASIVA ===");
        $this->info("Encuesta: {$encuesta->titulo} (ID: {$encuesta->id})");
        $this->line('');

        // Crear archivos de prueba si se solicita
        if ($createFiles) {
            $this->createTestFiles($encuesta);
        }

        // Probar funcionalidades
        $this->testRoutes();
        $this->testDataProcessing($encuesta);
        $this->testFileReading();
        $this->testTypePrediction();

        $this->info('‚úÖ Pruebas completadas');
        return 0;
    }

    private function testRoutes()
    {
        $this->info('üîó PROBANDO RUTAS:');

        $routes = [
            'carga-masiva.index' => 'P√°gina principal',
            'carga-masiva.procesar-preguntas' => 'Procesar preguntas',
            'carga-masiva.wizard-preguntas' => 'Wizard de preguntas',
            'carga-masiva.guardar-tipo-pregunta' => 'Guardar tipo pregunta',
            'carga-masiva.confirmar-preguntas' => 'Confirmar preguntas',
            'carga-masiva.guardar-preguntas' => 'Guardar preguntas',
            'carga-masiva.cargar-respuestas' => 'Cargar respuestas',
            'carga-masiva.procesar-respuestas' => 'Procesar respuestas'
        ];

        foreach ($routes as $routeName => $description) {
            try {
                $url = route($routeName);
                $this->line("  ‚úÖ {$description}: {$url}");
            } catch (\Exception $e) {
                $this->error("  ‚ùå {$description}: Error - {$e->getMessage()}");
            }
        }

        $this->line('');
    }

    private function testDataProcessing($encuesta)
    {
        $this->info('üìä PROBANDO PROCESAMIENTO DE DATOS:');

        // Simular datos de preguntas
        $preguntasTest = [
            ['texto' => '¬øCu√°l es tu nombre completo?', 'tipo' => 'texto_corto'],
            ['texto' => '¬øCu√°l es tu edad?', 'tipo' => 'texto_corto'],
            ['texto' => '¬øCu√°l es tu profesi√≥n?', 'tipo' => 'texto_corto'],
            ['texto' => '¬øCu√°l es tu nivel de satisfacci√≥n?', 'tipo' => 'escala'],
            ['texto' => '¬øQu√© servicios utilizas?', 'tipo' => 'casilla']
        ];

        $this->line("  üìù Preguntas de prueba: " . count($preguntasTest));

        // Simular datos de respuestas
        $respuestasTest = [
            ['numero_pregunta' => 1, 'contenido' => 'Juan P√©rez'],
            ['numero_pregunta' => 2, 'contenido' => '25'],
            ['numero_pregunta' => 3, 'contenido' => 'Ingeniero'],
            ['numero_pregunta' => 4, 'contenido' => '8'],
            ['numero_pregunta' => 5, 'contenido' => 'Servicio A, Servicio B']
        ];

        $this->line("  üìù Respuestas de prueba: " . count($respuestasTest));

        // Probar validaciones
        $this->line("  ‚úÖ Validaciones de compatibilidad:");
        $controller = new \App\Http\Controllers\CargaMasivaEncuestasController();

        foreach ($preguntasTest as $index => $pregunta) {
            $respuesta = $respuestasTest[$index] ?? null;
            if ($respuesta) {
                // Simular determinaci√≥n de tipo de respuesta
                $tipoRespuesta = $this->determinarTipoRespuesta($respuesta['contenido']);
                $compatible = $this->validarCompatibilidad($pregunta['tipo'], $tipoRespuesta);
                $status = $compatible ? '‚úÖ' : '‚ùå';
                $this->line("    {$status} Pregunta " . ($index + 1) . ": {$pregunta['tipo']} ‚Üí {$tipoRespuesta}");
            }
        }

        $this->line('');
    }

    private function testFileReading()
    {
        $this->info('üìÅ PROBANDO LECTURA DE ARCHIVOS:');

        // Simular contenido de archivo de preguntas
        $contenidoPreguntas = "¬øCu√°l es tu nombre completo?\n¬øCu√°l es tu edad?\n¬øCu√°l es tu profesi√≥n?\n¬øCu√°l es tu nivel de satisfacci√≥n?";

        // Simular contenido de archivo de respuestas
        $contenidoRespuestas = "R_1: Juan P√©rez\nR_2: 25\nR_3: Ingeniero\nR_4: 8";

        $this->line("  üìÑ Archivo preguntas (simulado):");
        $this->line("    " . str_replace("\n", "\n    ", $contenidoPreguntas));

        $this->line("  üìÑ Archivo respuestas (simulado):");
        $this->line("    " . str_replace("\n", "\n    ", $contenidoRespuestas));

        // Probar parsing
        $lineasPreguntas = explode("\n", trim($contenidoPreguntas));
        $preguntas = [];
        foreach ($lineasPreguntas as $index => $linea) {
            $linea = trim($linea);
            if (!empty($linea)) {
                $preguntas[] = [
                    'texto' => $linea,
                    'tipo' => null,
                    'orden' => $index + 1
                ];
            }
        }

        $this->line("  ‚úÖ Preguntas extra√≠das: " . count($preguntas));

        $lineasRespuestas = explode("\n", trim($contenidoRespuestas));
        $respuestas = [];
        foreach ($lineasRespuestas as $linea) {
            $linea = trim($linea);
            if (!empty($linea)) {
                if (preg_match('/^R_(\d+):\s*(.+)$/', $linea, $matches)) {
                    $numeroPregunta = (int)$matches[1];
                    $contenido = trim($matches[2]);

                    $respuestas[] = [
                        'numero_pregunta' => $numeroPregunta,
                        'contenido' => $contenido
                    ];
                }
            }
        }

        $this->line("  ‚úÖ Respuestas extra√≠das: " . count($respuestas));

        $this->line('');
    }

    private function testTypePrediction()
    {
        $this->info('ü§ñ PROBANDO PREDICCI√ìN DE TIPOS:');

        $preguntasTest = [
            '¬øCu√°l es tu nombre completo?' => 'texto_corto',
            '¬øCu√°l es tu email?' => 'texto_corto',
            '¬øCu√°l es tu tel√©fono?' => 'texto_corto',
            '¬øDescribe tu experiencia con el servicio?' => 'parrafo',
            '¬øCu√°l es tu opini√≥n sobre la atenci√≥n?' => 'parrafo',
            '¬øSelecciona tu g√©nero?' => 'seleccion_unica',
            '¬øCu√°l opci√≥n prefieres?' => 'seleccion_unica',
            '¬øMarca todas las opciones que apliquen?' => 'casilla',
            '¬øSelecciona de la lista?' => 'lista_desplegable',
            '¬øEn una escala del 1 al 10?' => 'escala',
            '¬øEval√∫a en la siguiente tabla?' => 'cuadricula'
        ];

        $aciertos = 0;
        $total = count($preguntasTest);

        foreach ($preguntasTest as $pregunta => $tipoEsperado) {
            $tipoPredicho = $this->predecirTipoPregunta($pregunta);
            $correcto = $tipoPredicho === $tipoEsperado;
            $status = $correcto ? '‚úÖ' : '‚ùå';

            if ($correcto) $aciertos++;

            $this->line("  {$status} \"{$pregunta}\"");
            $this->line("    Esperado: {$tipoEsperado}, Predicho: {$tipoPredicho}");
        }

        $precision = round(($aciertos / $total) * 100, 1);
        $this->line("  üìä Precisi√≥n: {$aciertos}/{$total} ({$precision}%)");

        $this->line('');
    }

    private function createTestFiles($encuesta)
    {
        $this->info('üìù CREANDO ARCHIVOS DE PRUEBA:');

        // Crear archivo de preguntas
        $preguntas = [
            '¬øCu√°l es tu nombre completo?',
            '¬øCu√°l es tu edad?',
            '¬øCu√°l es tu profesi√≥n?',
            '¬øCu√°l es tu nivel de satisfacci√≥n?',
            '¬øQu√© servicios utilizas?',
            '¬øCu√°l es tu opini√≥n sobre el servicio?',
            '¬øSelecciona tu g√©nero?',
            '¬øEn una escala del 1 al 10, califica la atenci√≥n?'
        ];

        $contenidoPreguntas = implode("\n", $preguntas);
        $rutaPreguntas = storage_path('app/test_preguntas.txt');
        file_put_contents($rutaPreguntas, $contenidoPreguntas);

        $this->line("  ‚úÖ Archivo de preguntas creado: {$rutaPreguntas}");

        // Crear archivo de respuestas
        $respuestas = [
            'R_1: Juan P√©rez',
            'R_2: 25',
            'R_3: Ingeniero',
            'R_4: 8',
            'R_5: Servicio A, Servicio B',
            'R_6: Muy satisfecho con el servicio recibido',
            'R_7: Masculino',
            'R_8: 9'
        ];

        $contenidoRespuestas = implode("\n", $respuestas);
        $rutaRespuestas = storage_path('app/test_respuestas.txt');
        file_put_contents($rutaRespuestas, $contenidoRespuestas);

        $this->line("  ‚úÖ Archivo de respuestas creado: {$rutaRespuestas}");

        $this->line('');
    }

    /**
     * Determinar tipo de respuesta (simulado)
     */
    private function determinarTipoRespuesta($contenido)
    {
        $contenido = trim($contenido);

        // Si contiene comas o saltos de l√≠nea, es m√∫ltiple
        if (strpos($contenido, ',') !== false || strpos($contenido, "\n") !== false) {
            return 'opciones_multiples';
        }

        // Si es muy corto, probablemente es texto
        if (strlen($contenido) <= 100) {
            return 'texto';
        }

        // Por defecto
        return 'texto';
    }

    /**
     * Validar compatibilidad entre tipo de pregunta y respuesta
     */
    private function validarCompatibilidad($tipoPregunta, $tipoRespuesta)
    {
        $compatibilidades = [
            'texto_corto' => ['texto'],
            'parrafo' => ['texto'],
            'seleccion_unica' => ['opciones_multiples'],
            'casilla' => ['opciones_multiples'],
            'lista_desplegable' => ['opciones_multiples'],
            'escala' => ['opciones_multiples'],
            'cuadricula' => ['opciones_multiples']
        ];

        return in_array($tipoRespuesta, $compatibilidades[$tipoPregunta] ?? []);
    }

    /**
     * Predecir tipo de pregunta usando IA (simulado)
     */
    private function predecirTipoPregunta($texto)
    {
        // Palabras clave para diferentes tipos de preguntas
        $palabrasClave = [
            'texto_corto' => ['nombre', 'email', 'tel√©fono', 'direcci√≥n', 'edad', 'fecha'],
            'parrafo' => ['describe', 'explica', 'comenta', 'opini√≥n', 'sugerencias', 'observaciones'],
            'seleccion_unica' => ['selecciona', 'elige', 'marca', 'cu√°l', 'qu√© opci√≥n'],
            'casilla' => ['marca', 'selecciona todas', 'm√∫ltiples', 'varias opciones'],
            'lista_desplegable' => ['selecciona de la lista', 'elige de', 'opciones disponibles'],
            'escala' => ['escala', 'del 1 al', 'nivel', 'grado', 'puntuaci√≥n'],
            'cuadricula' => ['tabla', 'matriz', 'cuadr√≠cula', 'evaluar']
        ];

        $textoLower = strtolower($texto);

        foreach ($palabrasClave as $tipo => $claves) {
            foreach ($claves as $clave) {
                if (strpos($textoLower, $clave) !== false) {
                    return $tipo;
                }
            }
        }

        // An√°lisis m√°s avanzado
        if (preg_match('/\?$/', $texto)) {
            // Pregunta directa
            if (preg_match('/(s√≠|no|si|no)\?/i', $texto)) {
                return 'seleccion_unica';
            }
            return 'texto_corto';
        }

        // Por defecto
        return 'texto_corto';
    }
}
